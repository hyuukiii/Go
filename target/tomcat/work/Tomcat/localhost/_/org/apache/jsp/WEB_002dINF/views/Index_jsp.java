/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2025-09-18 07:48:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.NumberFormat;
import BidsTransaction.BidDAO;
import java.util.ArrayList;
import main.java.Product.ProductDTO;

public final class Index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    // 카테고리 ID를 카테고리 코드로 변환하는 헬퍼 메서드
    private String getCategoryCode(String categoryId) {
        if (categoryId == null || categoryId.isEmpty()) {
            return "all";
        }

        // if-else로 변경 (Java 6 호환)
        if ("1".equals(categoryId)) {
            return "electronics"; // 전자기기
        } else if ("2".equals(categoryId)) {
            return "fashion"; // 패션
        } else if ("3".equals(categoryId)) {
            return "beauty"; // 뷰티/미용
        } else if ("4".equals(categoryId)) {
            return "sports"; // 스포츠/레저
        } else if ("5".equals(categoryId)) {
            return "books"; // 도서
        } else if ("6".equals(categoryId)) {
            return "appliances"; // 가전제품
        } else {
            return "all";
        }
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

ArrayList<ProductDTO> products = (ArrayList<ProductDTO>) request.getAttribute("products");
ArrayList<ProductDTO> popularProducts = (ArrayList<ProductDTO>) request.getAttribute("popularProducts");
ArrayList<ProductDTO> completedAuctions = (ArrayList<ProductDTO>) request.getAttribute("completedAuctions");

// 입찰가 조회를 위한 DAO 객체 생성
BidDAO bidDAO = new BidDAO();
// 숫자 포맷 객체 생성
NumberFormat nf = NumberFormat.getNumberInstance();

      out.write('\n');

String userId = (String) session.getAttribute("user_id");
String statusMessage = (String) request.getAttribute("statusMessage");

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("<title>메인화면</title>\n");
      out.write("<!-- Font Awesome CDN 추가 -->\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("\thref=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" />\n");
      out.write("<style>\n");
      out.write(".status-message {\n");
      out.write("\tpadding: 10px;\n");
      out.write("\tmargin: 10px 0;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tbackground-color: #4CAF50;\n");
      out.write("\tcolor: white;\n");
      out.write("\ttext-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-header {\n");
      out.write("\tbackground-color: #f5f5f5;\n");
      out.write("\tpadding: 10px;\n");
      out.write("\tmargin-top: 20px;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tborder-left: 4px solid #007bff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".popular-header {\n");
      out.write("\tborder-left: 4px solid #ff9800;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-card {\n");
      out.write("\twidth: 200px;\n");
      out.write("\ttext-align: center;\n");
      out.write("\tmargin-bottom: 20px;\n");
      out.write("\tborder: 1px solid #ddd;\n");
      out.write("\tborder-radius: 8px;\n");
      out.write("\tpadding-bottom: 10px;\n");
      out.write("\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n");
      out.write("\ttransition: transform 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-card:hover {\n");
      out.write("\ttransform: translateY(-5px);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-image {\n");
      out.write("\twidth: 100%;\n");
      out.write("\theight: 200px;\n");
      out.write("\tobject-fit: cover;\n");
      out.write("\tborder-top-left-radius: 8px;\n");
      out.write("\tborder-top-right-radius: 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-title {\n");
      out.write("\tmargin: 10px 5px;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\theight: 40px;\n");
      out.write("\toverflow: hidden;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-price {\n");
      out.write("\tcolor: #e44d26;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-status {\n");
      out.write("\tbackground-color: #f8d7da;\n");
      out.write("\tcolor: #721c24;\n");
      out.write("\tdisplay: inline-block;\n");
      out.write("\tpadding: 2px 8px;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tmargin-top: 5px;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".view-count {\n");
      out.write("\tfont-size: 12px;\n");
      out.write("\tcolor: #6c757d;\n");
      out.write("\tmargin-top: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".popular-badge {\n");
      out.write("\tposition: absolute;\n");
      out.write("\ttop: 10px;\n");
      out.write("\tright: 10px;\n");
      out.write("\tbackground-color: #ff9800;\n");
      out.write("\tcolor: white;\n");
      out.write("\tpadding: 3px 8px;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".products-container {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tflex-wrap: wrap;\n");
      out.write("\tgap: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 스택 카드 스와이프 스타일 제거됨 */\n");
      out.write(".header {\n");
      out.write("\tbackground-color: #ffffff;\n");
      out.write("\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n");
      out.write("\tpadding: 15px 20px;\n");
      out.write("\tmargin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-content {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tjustify-content: space-between;\n");
      out.write("\tmax-width: 1200px;\n");
      out.write("\tmargin: 0 auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-left {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-right {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tgap: 15px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".welcome-msg {\n");
      out.write("\tmargin-right: 10px;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-btn {\n");
      out.write("\ttext-decoration: none;\n");
      out.write("\tcolor: #333;\n");
      out.write("\tpadding: 5px 10px;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tborder: 1px solid #ddd;\n");
      out.write("\ttransition: all 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-btn:hover {\n");
      out.write("\tbackground-color: #f5f5f5;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".notification-icon-container {\n");
      out.write("\tposition: relative;\n");
      out.write("\tmargin-left: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".notification-icon {\n");
      out.write("\tcolor: #333;\n");
      out.write("\tfont-size: 18px;\n");
      out.write("\ttext-decoration: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".notification-badge {\n");
      out.write("\tposition: absolute;\n");
      out.write("\ttop: -8px;\n");
      out.write("\tright: -8px;\n");
      out.write("\tbackground-color: #ff4136;\n");
      out.write("\tcolor: white;\n");
      out.write("\tborder-radius: 50%;\n");
      out.write("\twidth: 18px;\n");
      out.write("\theight: 18px;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tjustify-content: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer {\n");
      out.write("\tbackground-color: #f8f9fa;\n");
      out.write("\tpadding: 20px 0;\n");
      out.write("\tmargin-top: 50px;\n");
      out.write("\tborder-top: 1px solid #e7e7e7;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-content {\n");
      out.write("\tmax-width: 1200px;\n");
      out.write("\tmargin: 0 auto;\n");
      out.write("\ttext-align: center;\n");
      out.write("\tcolor: #6c757d;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links {\n");
      out.write("\tmargin-top: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links a {\n");
      out.write("\tcolor: #6c757d;\n");
      out.write("\ttext-decoration: none;\n");
      out.write("\tmargin: 0 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links a:hover {\n");
      out.write("\ttext-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".content {\n");
      out.write("\tmax-width: 1200px;\n");
      out.write("\tmargin: 0 auto;\n");
      out.write("\tpadding: 0 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".actions {\n");
      out.write("\tmargin-bottom: 20px;\n");
      out.write("\ttext-align: right;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".action-btn {\n");
      out.write("\tdisplay: inline-block;\n");
      out.write("\tpadding: 8px 16px;\n");
      out.write("\tbackground-color: #007bff;\n");
      out.write("\tcolor: white;\n");
      out.write("\ttext-decoration: none;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\ttransition: background-color 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".action-btn:hover {\n");
      out.write("\tbackground-color: #0056b3;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 검색 기능 스타일 */\n");
      out.write(".search-container {\n");
      out.write("\tflex: 1;\n");
      out.write("\tmax-width: 500px;\n");
      out.write("\tmargin: 0 20px;\n");
      out.write("\tposition: relative;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-form {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\twidth: 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-input {\n");
      out.write("\tflex: 1;\n");
      out.write("\tborder: 2px solid #e0e0e0;\n");
      out.write("\tborder-radius: 20px 0 0 20px;\n");
      out.write("\tpadding: 8px 15px;\n");
      out.write("\tfont-size: 14px;\n");
      out.write("\ttransition: border-color 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-input:focus {\n");
      out.write("\toutline: none;\n");
      out.write("\tborder-color: #007bff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-btn {\n");
      out.write("\tbackground-color: #007bff;\n");
      out.write("\tcolor: white;\n");
      out.write("\tborder: none;\n");
      out.write("\tborder-radius: 0 20px 20px 0;\n");
      out.write("\tpadding: 8px 15px;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\ttransition: background-color 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-btn:hover {\n");
      out.write("\tbackground-color: #0056b3;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-filters {\n");
      out.write("\tdisplay: none;\n");
      out.write("\tposition: absolute;\n");
      out.write("\ttop: 100%;\n");
      out.write("\tleft: 0;\n");
      out.write("\twidth: 100%;\n");
      out.write("\tbackground-color: white;\n");
      out.write("\tborder: 1px solid #e0e0e0;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n");
      out.write("\tpadding: 10px;\n");
      out.write("\tz-index: 9999;\n");
      out.write("\tmargin-top: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-group {\n");
      out.write("\tmargin-bottom: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-title {\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\tmargin-bottom: 5px;\n");
      out.write("\tfont-size: 14px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-options {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tflex-wrap: wrap;\n");
      out.write("\tgap: 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-option {\n");
      out.write("\tbackground-color: #f5f5f5;\n");
      out.write("\tborder: 1px solid #ddd;\n");
      out.write("\tborder-radius: 20px;\n");
      out.write("\tpadding: 4px 10px;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\ttransition: all 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-option:hover, .filter-option.active {\n");
      out.write("\tbackground-color: #e3f2fd;\n");
      out.write("\tborder-color: #007bff;\n");
      out.write("\tcolor: #007bff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-button {\n");
      out.write("\tbackground-color: transparent;\n");
      out.write("\tborder: none;\n");
      out.write("\tcolor: #6c757d;\n");
      out.write("\tfont-size: 14px;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tposition: absolute;\n");
      out.write("\tright: 60px;\n");
      out.write("\ttop: 50%;\n");
      out.write("\ttransform: translateY(-50%);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-button i {\n");
      out.write("\tmargin-right: 4px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-status {\n");
      out.write("\tbackground-color: #f8d7da;\n");
      out.write("\tcolor: #721c24;\n");
      out.write("\tdisplay: inline-block;\n");
      out.write("\tpadding: 2px 8px;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tmargin-top: 5px;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 인기 상품 랭킹 스타일 복원 */\n");
      out.write("/* 랭킹 관련 CSS 스타일 제거됨 */\n");
      out.write("\n");
      out.write("/* 랭킹 컨테이너 스타일 */\n");
      out.write(".ranking-container {\n");
      out.write("\tbackground-color: #f8f9fa;\n");
      out.write("\tborder-radius: 8px;\n");
      out.write("\tpadding: 15px;\n");
      out.write("\tmargin-bottom: 30px;\n");
      out.write("\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-title {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tjustify-content: space-between;\n");
      out.write("\talign-items: center;\n");
      out.write("\tmargin-bottom: 15px;\n");
      out.write("\tfont-size: 18px;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-tabs {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tgap: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-tab {\n");
      out.write("\tpadding: 5px 10px;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tbackground-color: #e9ecef;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\tfont-size: 14px;\n");
      out.write("\tfont-weight: normal;\n");
      out.write("\ttransition: all 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-tab:hover {\n");
      out.write("\tbackground-color: #d1e7ff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-tab.active {\n");
      out.write("\tbackground-color: #007bff;\n");
      out.write("\tcolor: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-carousel {\n");
      out.write("\tposition: relative;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tgap: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-arrow {\n");
      out.write("\tbackground: rgba(255, 255, 255, 0.8);\n");
      out.write("\tborder: none;\n");
      out.write("\tborder-radius: 50%;\n");
      out.write("\twidth: 30px;\n");
      out.write("\theight: 30px;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n");
      out.write("\tz-index: 2;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-arrow:hover {\n");
      out.write("\tbackground: rgba(255, 255, 255, 1);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-items {\n");
      out.write("\tflex: 1;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\toverflow-x: auto;\n");
      out.write("\tgap: 15px;\n");
      out.write("\tpadding: 10px 5px;\n");
      out.write("\tscroll-behavior: smooth;\n");
      out.write("\t-ms-overflow-style: none;\n");
      out.write("\tscrollbar-width: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-items::-webkit-scrollbar {\n");
      out.write("\tdisplay: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-item {\n");
      out.write("\tflex: 0 0 auto;\n");
      out.write("\twidth: 200px;\n");
      out.write("\tborder-radius: 8px;\n");
      out.write("\tbackground-color: white;\n");
      out.write("\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n");
      out.write("\tpadding: 10px;\n");
      out.write("\tposition: relative;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\ttransition: transform 0.2s, box-shadow 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".ranking-item:hover {\n");
      out.write("\ttransform: translateY(-5px);\n");
      out.write("\tbox-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-badge {\n");
      out.write("\tposition: absolute;\n");
      out.write("\ttop: 10px;\n");
      out.write("\tleft: 10px;\n");
      out.write("\twidth: 24px;\n");
      out.write("\theight: 24px;\n");
      out.write("\tborder-radius: 50%;\n");
      out.write("\tbackground-color: #6c757d;\n");
      out.write("\tcolor: white;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\talign-items: center;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("\tz-index: 1;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-badge.top-3 {\n");
      out.write("\tbackground-color: #ff9800;\n");
      out.write("\twidth: 26px;\n");
      out.write("\theight: 26px;\n");
      out.write("\tfont-size: 14px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-badge.new {\n");
      out.write("\tleft: auto;\n");
      out.write("\tright: 10px;\n");
      out.write("\tbackground-color: #28a745;\n");
      out.write("\twidth: auto;\n");
      out.write("\tpadding: 0 8px;\n");
      out.write("\tborder-radius: 10px;\n");
      out.write("\tfont-size: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-badge.up, .rank-badge.down {\n");
      out.write("\tleft: 40px;\n");
      out.write("\twidth: auto;\n");
      out.write("\tpadding: 0 5px;\n");
      out.write("\tborder-radius: 10px;\n");
      out.write("\tfont-size: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-badge.up {\n");
      out.write("\tbackground-color: #28a745;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-badge.down {\n");
      out.write("\tbackground-color: #dc3545;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-image {\n");
      out.write("\twidth: 100%;\n");
      out.write("\theight: 150px;\n");
      out.write("\toverflow: hidden;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tmargin-bottom: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-item-image {\n");
      out.write("\twidth: 100%;\n");
      out.write("\theight: 100%;\n");
      out.write("\tobject-fit: cover;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-info {\n");
      out.write("\ttext-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-title {\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\tmargin-bottom: 5px;\n");
      out.write("\theight: 40px;\n");
      out.write("\toverflow: hidden;\n");
      out.write("\tdisplay: -webkit-box;\n");
      out.write("\t-webkit-line-clamp: 2;\n");
      out.write("\t-webkit-box-orient: vertical;\n");
      out.write("\tfont-size: 14px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".rank-price {\n");
      out.write("\tcolor: #e44d26;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\tfont-size: 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 768px) {\n");
      out.write("\t/* 랭킹 관련 스타일 제거됨 */\n");
      out.write("\t.ranking-title {\n");
      out.write("\t\tflex-direction: column;\n");
      out.write("\t\talign-items: flex-start;\n");
      out.write("\t\tgap: 10px;\n");
      out.write("\t}\n");
      out.write("\t.ranking-tabs {\n");
      out.write("\t\twidth: 100%;\n");
      out.write("\t\tjustify-content: space-between;\n");
      out.write("\t}\n");
      out.write("\t.ranking-tab {\n");
      out.write("\t\tflex: 1;\n");
      out.write("\t\ttext-align: center;\n");
      out.write("\t\tfont-size: 12px;\n");
      out.write("\t\tpadding: 5px;\n");
      out.write("\t}\n");
      out.write("\t.ranking-item {\n");
      out.write("\t\twidth: 160px;\n");
      out.write("\t}\n");
      out.write("\t.rank-title {\n");
      out.write("\t\tfont-size: 12px;\n");
      out.write("\t\theight: 36px;\n");
      out.write("\t}\n");
      out.write("\t.rank-price {\n");
      out.write("\t\tfont-size: 14px;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 로딩 및 에러 메시지 스타일 유지 */\n");
      out.write(".loading-indicator {\n");
      out.write("\twidth: 100%;\n");
      out.write("\ttext-align: center;\n");
      out.write("\tpadding: 20px;\n");
      out.write("\tcolor: #888;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".error-message {\n");
      out.write("\ttext-align: center;\n");
      out.write("\tpadding: 20px;\n");
      out.write("\tcolor: #d9534f;\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 768px) { /* 랭킹 관련 스타일 제거됨 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 추가: 카테고리 네비게이션 스타일 */\n");
      out.write(".category-nav {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\tmargin: 20px auto;\n");
      out.write("\tmax-width: 1200px;\n");
      out.write("\tbackground-color: #f8f9fa;\n");
      out.write("\tborder-radius: 8px;\n");
      out.write("\tpadding: 10px;\n");
      out.write("\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-container {\n");
      out.write("\tmax-width: 1200px;\n");
      out.write("\tmargin: 0 auto;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\toverflow-x: auto;\n");
      out.write("\twhite-space: nowrap;\n");
      out.write("\t-ms-overflow-style: none; /* IE and Edge */\n");
      out.write("\tscrollbar-width: none; /* Firefox */\n");
      out.write("\tpadding: 0 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-container::-webkit-scrollbar {\n");
      out.write("\tdisplay: none; /* Chrome, Safari, Opera */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-item {\n");
      out.write("\tpadding: 8px 15px;\n");
      out.write("\tmargin: 0 5px;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\ttransition: all 0.3s;\n");
      out.write("\ttext-decoration: none;\n");
      out.write("\tcolor: #333;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-item:hover, .category-item.active {\n");
      out.write("\tbackground-color: #007bff;\n");
      out.write("\tcolor: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 768px) {\n");
      out.write("\t.category-nav {\n");
      out.write("\t\tflex-wrap: wrap;\n");
      out.write("\t}\n");
      out.write("\t.category-item {\n");
      out.write("\t\tmargin: 5px;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 상품 카드에 카테고리 데이터 속성 추가를 위한 스타일 */\n");
      out.write(".product-card[data-category] {\n");
      out.write("\ttransition: opacity 0.3s, transform 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".product-card.hidden {\n");
      out.write("\tdisplay: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 추가: 카테고리 드롭다운 스타일 */\n");
      out.write(".category-menu {\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\tbackground-color: #f8f9fa;\n");
      out.write("\tborder-bottom: 1px solid #e7e7e7;\n");
      out.write("\tmargin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-menu-container {\n");
      out.write("\tmax-width: 1200px;\n");
      out.write("\twidth: 100%;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tjustify-content: space-between;\n");
      out.write("\tpadding: 0;\n");
      out.write("\tmargin: 0;\n");
      out.write("\tlist-style: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-item {\n");
      out.write("\tposition: relative;\n");
      out.write("\tpadding: 12px 15px;\n");
      out.write("\tcursor: pointer;\n");
      out.write("\ttransition: all 0.3s;\n");
      out.write("\tfont-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-item:hover {\n");
      out.write("\tbackground-color: #e9ecef;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".dropdown-content {\n");
      out.write("\tdisplay: none;\n");
      out.write("\tposition: absolute;\n");
      out.write("\ttop: 100%;\n");
      out.write("\tleft: 0;\n");
      out.write("\tbackground-color: white;\n");
      out.write("\tmin-width: 200px;\n");
      out.write("\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n");
      out.write("\tborder-radius: 4px;\n");
      out.write("\tz-index: 9999;\n");
      out.write("\tpadding: 10px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-item:hover .dropdown-content {\n");
      out.write("\tdisplay: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".dropdown-item {\n");
      out.write("\tpadding: 8px 15px;\n");
      out.write("\tdisplay: block;\n");
      out.write("\ttext-decoration: none;\n");
      out.write("\tcolor: #333;\n");
      out.write("\ttransition: background-color 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".dropdown-item:hover {\n");
      out.write("\tbackground-color: #f5f5f5;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".category-item i {\n");
      out.write("\tmargin-left: 5px;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<!-- 헤더 포함 -->\n");
      out.write("\t<div class=\"header\">\n");
      out.write("\t\t<div class=\"header-content\">\n");
      out.write("\t\t\t<div class=\"header-left\">\n");
      out.write("\t\t\t\t<h1>\n");
      out.write("\t\t\t\t\t<a href=\"index\" style=\"text-decoration: none; color: inherit;\">옥션\n");
      out.write("\t\t\t\t\t\t플랫폼</a>\n");
      out.write("\t\t\t\t</h1>\n");
      out.write("\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t<!-- 검색 기능 추가 -->\n");
      out.write("\t\t\t<div class=\"search-container\">\n");
      out.write("\t\t\t\t<form action=\"search\" method=\"get\" class=\"search-form\">\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"keyword\" class=\"search-input\"\n");
      out.write("\t\t\t\t\t\tplaceholder=\"찾고 싶은 상품을 검색해보세요\">\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"filter-button\" id=\"show-filters\">\n");
      out.write("\t\t\t\t\t\t<i class=\"fas fa-sliders-h\"></i> 필터\n");
      out.write("\t\t\t\t\t</button>\n");
      out.write("\t\t\t\t\t<button type=\"submit\" class=\"search-btn\">\n");
      out.write("\t\t\t\t\t\t<i class=\"fas fa-search\"></i>\n");
      out.write("\t\t\t\t\t</button>\n");
      out.write("\t\t\t\t</form>\n");
      out.write("\n");
      out.write("\t\t\t\t<!-- 검색 필터 드롭다운 -->\n");
      out.write("\t\t\t\t<div class=\"search-filters\" id=\"search-filters\"\n");
      out.write("\t\t\t\t\tstyle=\"display: none;\">\n");
      out.write("\t\t\t\t\t<div class=\"filter-group\">\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-title\">카테고리</div>\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-options\">\n");
      out.write("\t\t\t\t\t\t\t<span class=\"filter-option\" data-category=\"all\">전체</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-category=\"electronics\">전자기기</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-category=\"fashion\">패션</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-category=\"beauty\">뷰티/미용</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-category=\"sports\">스포츠/레저</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-category=\"books\">도서</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-category=\"appliances\">가전제품</span>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t<div class=\"filter-group\">\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-title\">가격 범위</div>\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-options\">\n");
      out.write("\t\t\t\t\t\t\t<span class=\"filter-option\" data-price=\"0-50000\">5만원 이하</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-price=\"50000-100000\">5만원~10만원</span>\n");
      out.write("\t\t\t\t\t\t\t<span class=\"filter-option\" data-price=\"100000-300000\">10만원~30만원</span>\n");
      out.write("\t\t\t\t\t\t\t<span class=\"filter-option\" data-price=\"300000-\">30만원 이상</span>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t<div class=\"filter-group\">\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-title\">상품 상태</div>\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-options\">\n");
      out.write("\t\t\t\t\t\t\t<span class=\"filter-option\" data-status=\"onsale\">판매중</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-status=\"closed\">경매종료</span>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t<div class=\"filter-group\">\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-title\">정렬 방식</div>\n");
      out.write("\t\t\t\t\t\t<div class=\"filter-options\">\n");
      out.write("\t\t\t\t\t\t\t<span class=\"filter-option\" data-sort=\"relevance\">관련성순</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-sort=\"priceAsc\">가격 낮은순</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-sort=\"priceDesc\">가격 높은순</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-sort=\"newest\">최신순</span> <span\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"filter-option\" data-sort=\"endingSoon\">마감임박순</span>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t<div class=\"header-right\">\n");
      out.write("\t\t\t\t");

				if (userId != null) {
				
      out.write("\n");
      out.write("\t\t\t\t<span class=\"welcome-msg\">");
      out.print(userId);
      out.write("님 환영합니다</span> <a href=\"mypage\"\n");
      out.write("\t\t\t\t\tclass=\"header-btn\">마이페이지</a>\n");
      out.write("\t\t\t\t<form action=\"logout\" method=\"post\" style=\"display: inline;\">\n");
      out.write("\t\t\t\t\t<button type=\"submit\" class=\"header-btn\"\n");
      out.write("\t\t\t\t\t\tstyle=\"cursor: pointer; background: none; border: 1px solid #ddd; padding: 5px 10px; border-radius: 4px;\">로그아웃</button>\n");
      out.write("\t\t\t\t</form>\n");
      out.write("\n");
      out.write("\t\t\t\t<!-- 알림 아이콘 추가 -->\n");
      out.write("\t\t\t\t<div class=\"notification-icon-container\">\n");
      out.write("\t\t\t\t\t<a href=\"notifications\" class=\"notification-icon\"> <i\n");
      out.write("\t\t\t\t\t\tclass=\"fa fa-bell\"></i> ");

						// 미읽은 알림 개수 가져오기
						int unreadNotificationCount = 0;
						try {
							Notification.NotificationDAO notificationDAO = new Notification.NotificationDAO();
							unreadNotificationCount = notificationDAO.getUnreadNotificationCount(userId);
						} catch (Exception e) {
							e.printStackTrace();
						}
						if (unreadNotificationCount > 0) {
						
      out.write(" <span class=\"notification-badge\">");
      out.print(unreadNotificationCount);
      out.write("</span>\n");
      out.write("\t\t\t\t\t\t");

						}
						
      out.write("\n");
      out.write("\t\t\t\t\t</a>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t");

				} else {
				
      out.write("\n");
      out.write("\t\t\t\t<a href=\"login\" class=\"header-btn\">로그인</a> <a href=\"signup\"\n");
      out.write("\t\t\t\t\tclass=\"header-btn\">회원가입</a>\n");
      out.write("\t\t\t\t");

				}
				
      out.write("\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<!-- 카테고리 메뉴 추가 -->\n");
      out.write("\t\t<div class=\"category-menu\">\n");
      out.write("\t\t\t<ul class=\"category-menu-container\">\n");
      out.write("\t\t\t\t<li class=\"category-item\">전자기기 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?category=electronics&subcategory=mobile\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">스마트폰/태블릿</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=electronics&subcategory=computer\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">노트북/PC</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=electronics&subcategory=camera\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">카메라/캠코더</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=electronics&subcategory=audio\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">오디오/이어폰/헤드셋</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=electronics&subcategory=wearable\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">웨어러블 기기</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=electronics&subcategory=gaming\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">게임기/게임타이틀</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">패션 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?category=fashion&subcategory=women\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">여성의류</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=fashion&subcategory=men\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">남성의류</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=fashion&subcategory=kids\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">아동의류</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=fashion&subcategory=bags\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">가방/지갑</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=fashion&subcategory=shoes\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">신발</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=fashion&subcategory=accessories\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">액세서리/주얼리</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">뷰티/미용 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?category=beauty&subcategory=skincare\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">스킨케어</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=beauty&subcategory=makeup\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">메이크업</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=beauty&subcategory=haircare\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">헤어케어</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=beauty&subcategory=bodycare\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">바디케어</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=beauty&subcategory=perfume\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">향수</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=beauty&subcategory=menbeauty\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">남성화장품</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">스포츠/레저 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?category=sports&subcategory=fitness\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">헬스/요가/필라테스</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=sports&subcategory=golf\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">골프</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=sports&subcategory=outdoor\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">등산/아웃도어</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=sports&subcategory=bicycle\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">자전거</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=sports&subcategory=swimming\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">수영/수상스포츠</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=sports&subcategory=ballgame\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">구기스포츠</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">도서 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?category=books&subcategory=fiction\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">소설/문학</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=books&subcategory=education\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">교육/학습</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=books&subcategory=kids\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">아동/청소년</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=books&subcategory=comic\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">만화/웹툰</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=books&subcategory=magazine\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">잡지/정기간행물</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=books&subcategory=foreign\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">외국도서</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">가전제품 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?category=appliances&subcategory=tv\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">TV/프로젝터</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=appliances&subcategory=refrigerator\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">냉장고/김치냉장고</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=appliances&subcategory=washer\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">세탁기/건조기</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=appliances&subcategory=kitchen\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">주방가전</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=appliances&subcategory=aircon\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">에어컨/제습기</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?category=appliances&subcategory=smallappliance\"\n");
      out.write("\t\t\t\t\t\t\tclass=\"dropdown-item\">소형가전</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">신상품 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?sort=newest&days=3\" class=\"dropdown-item\">최근\n");
      out.write("\t\t\t\t\t\t\t3일</a> <a href=\"search?sort=newest&days=7\" class=\"dropdown-item\">최근\n");
      out.write("\t\t\t\t\t\t\t7일</a> <a href=\"search?sort=newest&days=30\" class=\"dropdown-item\">최근\n");
      out.write("\t\t\t\t\t\t\t30일</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t\t<li class=\"category-item\">마감임박 <i class=\"fas fa-caret-down\"></i>\n");
      out.write("\t\t\t\t\t<div class=\"dropdown-content\">\n");
      out.write("\t\t\t\t\t\t<a href=\"search?endingSoon=1\" class=\"dropdown-item\">1시간 이내</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?endingSoon=3\" class=\"dropdown-item\">3시간 이내</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?endingSoon=6\" class=\"dropdown-item\">6시간 이내</a> <a\n");
      out.write("\t\t\t\t\t\t\thref=\"search?endingSoon=24\" class=\"dropdown-item\">24시간 이내</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<!-- ----------------------------------------------------------------------------------------------여기까지가 헤더----------------------------------------------------------------------------------------------------- -->\n");
      out.write("\n");
      out.write("\t<div class=\"content\">\n");
      out.write("\t\t<!-- 인기 상품 랭킹 캐러셀 (최상단 배치) -->\n");
      out.write("\t\t<div class=\"ranking-container\">\n");
      out.write("\t\t\t<div class=\"ranking-title\">\n");
      out.write("\t\t\t\t<span>인기 상품 랭킹</span>\n");
      out.write("\t\t\t\t<div class=\"ranking-tabs\">\n");
      out.write("\t\t\t\t\t<div class=\"ranking-tab active\" data-type=\"views\">조회순</div>\n");
      out.write("\t\t\t\t\t<div class=\"ranking-tab\" data-type=\"bids\">입찰순</div>\n");
      out.write("\t\t\t\t\t<div class=\"ranking-tab\" data-type=\"favorites\">찜순</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t<div class=\"ranking-carousel\">\n");
      out.write("\t\t\t\t<button class=\"carousel-arrow prev-arrow\">\n");
      out.write("\t\t\t\t\t<i class=\"fas fa-chevron-left\"></i>\n");
      out.write("\t\t\t\t</button>\n");
      out.write("\t\t\t\t<div class=\"ranking-items\">\n");
      out.write("\t\t\t\t\t<div class=\"loading-indicator\">랭킹 로딩 중...</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<button class=\"carousel-arrow next-arrow\">\n");
      out.write("\t\t\t\t\t<i class=\"fas fa-chevron-right\"></i>\n");
      out.write("\t\t\t\t</button>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<!-- 기존 코드 유지 -->\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t");

		if (statusMessage != null && !statusMessage.isEmpty()) {
		
      out.write("\n");
      out.write("\t\t<div class=\"status-message\">");
      out.print(statusMessage);
      out.write("</div>\n");
      out.write("\t\t");

		}
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t<h2 class=\"section-header\">판매중인 상품 목록</h2>\n");
      out.write("\n");
      out.write("\t\t");

		if (products == null || products.isEmpty()) {
		
      out.write("\n");
      out.write("\t\t<p style=\"color: gray; font-weight: bold;\">현재 판매중인 물품이 없습니다.</p>\n");
      out.write("\t\t");

		} else {
		
      out.write("\n");
      out.write("\t\t<div class=\"products-container\">\n");
      out.write("\t\t\t");

			for (ProductDTO p : products) {
				// 현재 최고 입찰가 조회
				Integer currentBid = bidDAO.getCurrentBid(p.getProduct_id());
				// 표시할 가격 설정 (입찰가가 있으면 입찰가, 없으면 기본 가격)
				int displayPrice = (currentBid != null && currentBid > 0) ? currentBid : p.getPrice();
				String formattedPrice = nf.format(displayPrice);
				
				// 카테고리 ID를 카테고리 코드로 변환
				String categoryCode = getCategoryCode(p.getCategory_id());
			
      out.write("\n");
      out.write("\t\t\t<div class=\"product-card\" data-category=\"");
      out.print(categoryCode);
      out.write("\">\n");
      out.write("\t\t\t\t<a\n");
      out.write("\t\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/buyingproduct?product_id=");
      out.print(p.getProduct_id());
      out.write("\">\n");
      out.write("\t\t\t\t\t<img\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.print(request.getContextPath());
      out.write('/');
      out.print(p.getImage_path() != null ? p.getImage_path() : "images/default.jpg");
      out.write("\"\n");
      out.write("\t\t\t\t\talt=\"상품 이미지\" class=\"product-image\">\n");
      out.write("\t\t\t\t</a>\n");
      out.write("\t\t\t\t<div class=\"product-title\">");
      out.print(p.getTitle());
      out.write("</div>\n");
      out.write("\t\t\t\t<div class=\"product-price\">\n");
      out.write("\t\t\t\t\t");
      out.print(formattedPrice);
      out.write("원\n");
      out.write("\t\t\t\t\t");
 if (currentBid != null && currentBid > 0) { 
      out.write("\n");
      out.write("\t\t\t\t\t<span\n");
      out.write("\t\t\t\t\t\tstyle=\"font-size: 0.8rem; font-weight: normal; margin-left: 3px; color: #FF9800;\">\n");
      out.write("\t\t\t\t\t\t(현재 입찰가)</span>\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t");

			}
			
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t\t");

		}
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t<!-- 경매 종료된 상품 목록 섹션 -->\n");
      out.write("\t\t<h2 class=\"section-header\">경매가 종료된 상품 목록</h2>\n");
      out.write("\n");
      out.write("\t\t");

		if (completedAuctions == null || completedAuctions.isEmpty()) {
		
      out.write("\n");
      out.write("\t\t<p style=\"color: gray; font-weight: bold;\">경매가 종료된 물품이 없습니다.</p>\n");
      out.write("\t\t");

		} else {
		
      out.write("\n");
      out.write("\t\t<div class=\"products-container\">\n");
      out.write("\t\t\t");

			for (ProductDTO p : completedAuctions) {
				// 경매 종료된 상품은 price가 최종 낙찰가임
				String formattedPrice = nf.format(p.getPrice());
				
				// 카테고리 ID를 카테고리 코드로 변환
				String categoryCode = getCategoryCode(p.getCategory_id());
			
      out.write("\n");
      out.write("\t\t\t<div class=\"product-card\" data-category=\"");
      out.print(categoryCode);
      out.write("\">\n");
      out.write("\t\t\t\t<a\n");
      out.write("\t\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/buyingproduct?product_id=");
      out.print(p.getProduct_id());
      out.write("\">\n");
      out.write("\t\t\t\t\t<img\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.print(request.getContextPath());
      out.write('/');
      out.print(p.getImage_path() != null ? p.getImage_path() : "images/default.jpg");
      out.write("\"\n");
      out.write("\t\t\t\t\talt=\"상품 이미지\" class=\"product-image\">\n");
      out.write("\t\t\t\t</a>\n");
      out.write("\t\t\t\t<div class=\"product-title\">");
      out.print(p.getTitle());
      out.write("</div>\n");
      out.write("\t\t\t\t<div class=\"product-price\">\n");
      out.write("\t\t\t\t\t");
      out.print(formattedPrice);
      out.write("원 <span\n");
      out.write("\t\t\t\t\t\tstyle=\"font-size: 0.8rem; font-weight: normal; margin-left: 3px; color: #6c757d;\">\n");
      out.write("\t\t\t\t\t\t(낙찰가)</span>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<div class=\"product-status\">경매 종료</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t");

			}
			
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t\t");

		}
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t<h2 class=\"section-header\">내가 찜한 상품</h2>\n");
      out.write("\t\t");

		ArrayList<ProductDTO> favorites = (ArrayList<ProductDTO>) request.getAttribute("favorites");
		if (userId == null) {
		
      out.write("\n");
      out.write("\t\t<p style=\"color: red;\">로그인 후 이용 가능합니다.</p>\n");
      out.write("\t\t");

		} else if (favorites == null || favorites.isEmpty()) {
		
      out.write("\n");
      out.write("\t\t<p>찜한 상품이 없습니다.</p>\n");
      out.write("\t\t");

		} else {
		
      out.write("\n");
      out.write("\t\t<div class=\"products-container\">\n");
      out.write("\t\t\t");

			for (ProductDTO p : favorites) {
				// 현재 최고 입찰가 조회
				Integer currentBid = bidDAO.getCurrentBid(p.getProduct_id());
				// 표시할 가격 설정 (입찰가가 있으면 입찰가, 없으면 기본 가격)
				int displayPrice = (currentBid != null && currentBid > 0) ? currentBid : p.getPrice();
				String formattedPrice = nf.format(displayPrice);
				
				// 카테고리 ID를 카테고리 코드로 변환
				String categoryCode = getCategoryCode(p.getCategory_id());
			
      out.write("\n");
      out.write("\t\t\t<div class=\"product-card\" data-category=\"");
      out.print(categoryCode);
      out.write("\">\n");
      out.write("\t\t\t\t<a href=\"buyingproduct?product_id=");
      out.print(p.getProduct_id());
      out.write("\"> <img\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.print(request.getContextPath());
      out.write('/');
      out.print(p.getImage_path() != null ? p.getImage_path() : "images/default.jpg");
      out.write("\"\n");
      out.write("\t\t\t\t\tclass=\"product-image\">\n");
      out.write("\t\t\t\t</a>\n");
      out.write("\t\t\t\t<div class=\"product-title\">");
      out.print(p.getTitle());
      out.write("</div>\n");
      out.write("\t\t\t\t<div class=\"product-price\">\n");
      out.write("\t\t\t\t\t");
      out.print(formattedPrice);
      out.write("원\n");
      out.write("\t\t\t\t\t");
 if (currentBid != null && currentBid > 0) { 
      out.write("\n");
      out.write("\t\t\t\t\t<span\n");
      out.write("\t\t\t\t\t\tstyle=\"font-size: 0.8rem; font-weight: normal; margin-left: 3px; color: #FF9800;\">\n");
      out.write("\t\t\t\t\t\t(현재 입찰가)</span>\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t");

			}
			
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t\t");

		}
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t<h2 class=\"section-header\">낙찰한 상품</h2>\n");
      out.write("\n");
      out.write("\t\t");

		if (userId == null) {
		
      out.write("\n");
      out.write("\t\t<p style=\"color: red;\">로그인 후 이용 가능합니다.</p>\n");
      out.write("\t\t");

		} else {
		ArrayList<ProductDTO> winningProducts = (ArrayList<ProductDTO>) request.getAttribute("winningProducts");
		if (winningProducts == null || winningProducts.isEmpty()) {
		
      out.write("\n");
      out.write("\t\t<p style=\"color: gray;\">현재 낙찰한 상품이 없습니다.</p>\n");
      out.write("\t\t");

		} else {
		
      out.write("\n");
      out.write("\t\t<div class=\"products-container\">\n");
      out.write("\t\t\t");

			for (ProductDTO p : winningProducts) {
				// 낙찰된 상품은 price가 낙찰가임
				String formattedPrice = nf.format(p.getPrice());
				
				// 카테고리 ID를 카테고리 코드로 변환
				String categoryCode = getCategoryCode(p.getCategory_id());
			
      out.write("\n");
      out.write("\t\t\t<div class=\"product-card\" data-category=\"");
      out.print(categoryCode);
      out.write("\">\n");
      out.write("\t\t\t\t<a href=\"buyingproduct?product_id=");
      out.print(p.getProduct_id());
      out.write("\"> <img\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.print(request.getContextPath());
      out.write('/');
      out.print(p.getImage_path() != null ? p.getImage_path() : "images/default.jpg");
      out.write("\"\n");
      out.write("\t\t\t\t\talt=\"상품 이미지\" class=\"product-image\">\n");
      out.write("\t\t\t\t</a>\n");
      out.write("\t\t\t\t<div class=\"product-title\">");
      out.print(p.getTitle());
      out.write("</div>\n");
      out.write("\t\t\t\t<div class=\"product-price\">\n");
      out.write("\t\t\t\t\t");
      out.print(formattedPrice);
      out.write("원 <span\n");
      out.write("\t\t\t\t\t\tstyle=\"font-size: 0.8rem; font-weight: normal; margin-left: 3px; color: #6c757d;\">\n");
      out.write("\t\t\t\t\t\t(낙찰가)</span>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<div class=\"product-status\">낙찰됨</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t");

			}
			
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t\t");

		}
		
      out.write('\n');
      out.write('	');
      out.write('	');

		}
		
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<!-- 푸터 추가 -->\n");
      out.write("\t<div class=\"footer\">\n");
      out.write("\t\t<div class=\"footer-content\">\n");
      out.write("\t\t\t<p>&copy; 2024 옥션 플랫폼. All rights reserved.</p>\n");
      out.write("\t\t\t<div class=\"footer-links\">\n");
      out.write("\t\t\t\t<a href=\"#\">이용약관</a> | <a href=\"#\">개인정보처리방침</a> | <a href=\"#\">고객센터</a>\n");
      out.write("\t\t\t\t");
 if (userId != null) { 
      out.write("\n");
      out.write("\t\t\t\t| <a href=\"receivedreviews\">받은 리뷰 보기</a> | <a href=\"reviewform\">리뷰\n");
      out.write("\t\t\t\t\t작성하기</a>\n");
      out.write("\t\t\t\t");
 } 
      out.write("\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("<script>\n");
      out.write("\tconst contextPath = '");
      out.print( request.getContextPath() );
      out.write("';\n");
      out.write("\n");
      out.write("\t// 전역 변수로 필터 버튼과 컨테이너 참조를 저장\n");
      out.write("\tlet showFiltersBtn;\n");
      out.write("\tlet filtersContainer;\n");
      out.write("\n");
      out.write("\t// 페이지 로드 시 초기화 함수\n");
      out.write("\tdocument.addEventListener('DOMContentLoaded', function() {\n");
      out.write("\t\tconsole.log('DOM이 로드되었습니다. 필터 및 랭킹 기능 초기화 중...');\n");
      out.write("\t\t\n");
      out.write("\t\t// 필터 관련 요소 참조 얻기\n");
      out.write("\t\tshowFiltersBtn = document.getElementById('show-filters');\n");
      out.write("\t\tfiltersContainer = document.getElementById('search-filters');\n");
      out.write("\t\t\n");
      out.write("\t\t// 필터 기능 초기화\n");
      out.write("\t\tinitFilterUI();\n");
      out.write("\t\t\n");
      out.write("\t\t// 인기 상품 랭킹 기능 초기화\n");
      out.write("\t\tinitRankings();\n");
      out.write("\t\t\n");
      out.write("\t\t// 이미지 오류 처리를 위한 전역 핸들러\n");
      out.write("\t\tdocument.querySelectorAll('img').forEach(img => {\n");
      out.write("\t\t\tif (!img.hasAttribute('onerror')) {\n");
      out.write("\t\t\t\timg.onerror = function() {\n");
      out.write("\t\t\t\t\tthis.src = '");
      out.print(request.getContextPath());
      out.write("/images/default.jpg';\n");
      out.write("\t\t\t\t\tconsole.log('이미지 로드 실패 (전역 핸들러): ' + this.alt);\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("\t// 필터 UI 초기화 함수\n");
      out.write("\tfunction initFilterUI() {\n");
      out.write("\t\tconsole.log('필터 UI 초기화 중...');\n");
      out.write("\t\t\n");
      out.write("\t\tif (!showFiltersBtn || !filtersContainer) {\n");
      out.write("\t\t\tconsole.error('필터 버튼 또는 필터 컨테이너를 찾을 수 없습니다.', {\n");
      out.write("\t\t\t\t'showFiltersBtn': showFiltersBtn, \n");
      out.write("\t\t\t\t'filtersContainer': filtersContainer\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log('필터 버튼 및 컨테이너 참조 얻음:', {\n");
      out.write("\t\t\t'버튼': showFiltersBtn.id, \n");
      out.write("\t\t\t'컨테이너': filtersContainer.id\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 필터 버튼 클릭 이벤트\n");
      out.write("\t\tshowFiltersBtn.addEventListener('click', function(e) {\n");
      out.write("\t\t\te.preventDefault();\n");
      out.write("\t\t\te.stopPropagation();\n");
      out.write("\t\t\tconsole.log('필터 버튼 클릭됨, 현재 표시 상태:', filtersContainer.style.display);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 표시 상태 토글\n");
      out.write("\t\t\tif (filtersContainer.style.display === 'block') {\n");
      out.write("\t\t\t\tfiltersContainer.style.display = 'none';\n");
      out.write("\t\t\t\tconsole.log('필터 패널 숨김');\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tfiltersContainer.style.display = 'block';\n");
      out.write("\t\t\t\tconsole.log('필터 패널 표시');\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 필터 옵션 클릭 이벤트\n");
      out.write("\t\tconst filterOptions = document.querySelectorAll('.filter-option');\n");
      out.write("\t\tfilterOptions.forEach(option => {\n");
      out.write("\t\t\toption.addEventListener('click', function(e) {\n");
      out.write("\t\t\t\te.preventDefault();\n");
      out.write("\t\t\t\te.stopPropagation();\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log('필터 옵션 클릭됨:', this.textContent);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 같은 그룹 내에서는 하나만 선택 가능하도록 처리\n");
      out.write("\t\t\t\tconst groupOptions = this.parentElement.querySelectorAll('.filter-option');\n");
      out.write("\t\t\t\tgroupOptions.forEach(opt => opt.classList.remove('active'));\n");
      out.write("\t\t\t\tthis.classList.add('active');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 선택된 필터 값을 폼에 추가\n");
      out.write("\t\t\t\tconst type = this.dataset.category ? 'category' : \n");
      out.write("\t\t\t\t\tthis.dataset.price ? 'price' : \n");
      out.write("\t\t\t\t\tthis.dataset.status ? 'status' : \n");
      out.write("\t\t\t\t\tthis.dataset.sort ? 'sort' : '';\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconst value = this.dataset.category || this.dataset.price || this.dataset.status || this.dataset.sort;\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log('필터 값 설정:', type, '=', value);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 기존 히든 필드가 있으면 업데이트, 없으면 생성\n");
      out.write("\t\t\t\tlet hiddenField = document.querySelector(`input[name=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${type}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\"]`);\n");
      out.write("\t\t\t\tif (!hiddenField) {\n");
      out.write("\t\t\t\t\thiddenField = document.createElement('input');\n");
      out.write("\t\t\t\t\thiddenField.type = 'hidden';\n");
      out.write("\t\t\t\t\thiddenField.name = type;\n");
      out.write("\t\t\t\t\tdocument.querySelector('.search-form').appendChild(hiddenField);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\thiddenField.value = value;\n");
      out.write("\t\t\t});\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 검색 버튼 클릭 이벤트 - 폼 제출 처리\n");
      out.write("\t\tconst searchBtn = document.querySelector('.search-btn');\n");
      out.write("\t\tif (searchBtn) {\n");
      out.write("\t\t\tsearchBtn.addEventListener('click', function(e) {\n");
      out.write("\t\t\t\te.preventDefault();\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log('검색 버튼 클릭, 모든 필터 적용');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 선택된 필터 옵션 가져오기\n");
      out.write("\t\t\t\tconst categoryField = document.querySelector('input[name=\"category\"]');\n");
      out.write("\t\t\t\tconst priceField = document.querySelector('input[name=\"price\"]');\n");
      out.write("\t\t\t\tconst sortField = document.querySelector('input[name=\"sort\"]');\n");
      out.write("\t\t\t\tconst statusField = document.querySelector('input[name=\"status\"]');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 카테고리 필터 적용\n");
      out.write("\t\t\t\tif (categoryField && categoryField.value) {\n");
      out.write("\t\t\t\t\tfilterProductsByCategory(categoryField.value);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 가격 필터 적용\n");
      out.write("\t\t\t\tif (priceField && priceField.value) {\n");
      out.write("\t\t\t\t\tapplyPriceFilter(priceField.value);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 정렬 필터 적용\n");
      out.write("\t\t\t\tif (sortField && sortField.value) {\n");
      out.write("\t\t\t\t\tapplySortFilter(sortField.value);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 상품 상태 필터 적용\n");
      out.write("\t\t\t\tif (statusField && statusField.value) {\n");
      out.write("\t\t\t\t\tfilterByStatus(statusField.value);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 폼 제출\n");
      out.write("\t\t\t\t// 검색어가 입력된 경우에만 서버에 폼을 제출\n");
      out.write("\t\t\t\tconst searchInput = document.querySelector('.search-input');\n");
      out.write("\t\t\t\tif (searchInput && searchInput.value.trim() !== '') {\n");
      out.write("\t\t\t\t\tconsole.log('검색어 입력됨, 서버에 검색 요청:', searchInput.value);\n");
      out.write("\t\t\t\t\tdocument.querySelector('.search-form').submit();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 문서 다른 곳 클릭 시 필터 패널 닫기\n");
      out.write("\t\tdocument.addEventListener('click', function(e) {\n");
      out.write("\t\t\t// 필터 컨테이너나 버튼이 클릭 대상 또는 그 상위에 있는지 확인\n");
      out.write("\t\t\tif (filtersContainer && showFiltersBtn && \n");
      out.write("\t\t\t\t!filtersContainer.contains(e.target) && \n");
      out.write("\t\t\t\t!showFiltersBtn.contains(e.target)) {\n");
      out.write("\t\t\t\tconsole.log('필터 패널 외부 클릭 감지, 패널 닫기');\n");
      out.write("\t\t\t\tfiltersContainer.style.display = 'none';\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log('필터 UI 초기화 완료');\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// 랭킹 기능 초기화\n");
      out.write("\tfunction initRankings() {\n");
      out.write("\t\tconsole.log('랭킹 기능 초기화');\n");
      out.write("\t\t\n");
      out.write("\t\t// 조회순 탭 (기본)\n");
      out.write("\t\tconst viewsTab = document.querySelector('.ranking-tab[data-type=\"views\"]');\n");
      out.write("\t\tif (viewsTab) {\n");
      out.write("\t\t\tviewsTab.addEventListener('click', function() {\n");
      out.write("\t\t\t\tconsole.log('조회순 탭 클릭');\n");
      out.write("\t\t\t\tdocument.querySelectorAll('.ranking-tab').forEach(t => t.classList.remove('active'));\n");
      out.write("\t\t\t\tthis.classList.add('active');\n");
      out.write("\t\t\t\tloadViewsRanking();\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 입찰순 탭\n");
      out.write("\t\tconst bidsTab = document.querySelector('.ranking-tab[data-type=\"bids\"]');\n");
      out.write("\t\tif (bidsTab) {\n");
      out.write("\t\t\tbidsTab.addEventListener('click', function() {\n");
      out.write("\t\t\t\tconsole.log('입찰순 탭 클릭');\n");
      out.write("\t\t\t\tdocument.querySelectorAll('.ranking-tab').forEach(t => t.classList.remove('active'));\n");
      out.write("\t\t\t\tthis.classList.add('active');\n");
      out.write("\t\t\t\tloadBidsRanking();\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 찜순 탭\n");
      out.write("\t\tconst favoritesTab = document.querySelector('.ranking-tab[data-type=\"favorites\"]');\n");
      out.write("\t\tif (favoritesTab) {\n");
      out.write("\t\t\tfavoritesTab.addEventListener('click', function() {\n");
      out.write("\t\t\t\tconsole.log('찜순 탭 클릭');\n");
      out.write("\t\t\t\tdocument.querySelectorAll('.ranking-tab').forEach(t => t.classList.remove('active'));\n");
      out.write("\t\t\t\tthis.classList.add('active');\n");
      out.write("\t\t\t\tloadFavoritesRanking();\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 캐러셀 화살표 이벤트 설정\n");
      out.write("\t\tsetupCarouselArrows();\n");
      out.write("\t\t\n");
      out.write("\t\t// 기본값 (조회순) 랭킹 로드\n");
      out.write("\t\tloadViewsRanking();\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 조회순 랭킹 로드\n");
      out.write("\tfunction loadViewsRanking() {\n");
      out.write("\t\tconsole.log('조회순 랭킹 데이터 요청 시작');\n");
      out.write("\t\tconst container = document.querySelector('.ranking-items');\n");
      out.write("\t\tif (!container) {\n");
      out.write("\t\t\tconsole.error('랭킹 컨테이너를 찾을 수 없습니다');\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tcontainer.innerHTML = '<div class=\"loading-indicator\">랭킹 로딩 중...</div>';\n");
      out.write("\t\t\n");
      out.write("\t\tconst url = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/product/rankings?type=views&limit=10`;\n");
      out.write("\t\tconsole.log('요청 URL:', url);\n");
      out.write("\t\t\n");
      out.write("\t\tfetch(url)\n");
      out.write("\t\t\t.then(response => {\n");
      out.write("\t\t\t\tconsole.log(`서버 응답 상태: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\tif (!response.ok) {\n");
      out.write("\t\t\t\t\tthrow new Error(`서버 응답 오류: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn response.text();\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.then(text => {\n");
      out.write("\t\t\t\tif (!text || text.trim() === '') {\n");
      out.write("\t\t\t\t\tthrow new Error('서버에서 빈 응답을 받았습니다');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log('서버 응답 원본 (처음 100자):', text.substring(0, 100) + '...');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\ttry {\n");
      out.write("\t\t\t\t\treturn JSON.parse(text);\n");
      out.write("\t\t\t\t} catch (e) {\n");
      out.write("\t\t\t\t\tconsole.error('JSON 파싱 오류:', e);\n");
      out.write("\t\t\t\t\tthrow new Error('JSON 파싱 오류');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.then(data => {\n");
      out.write("\t\t\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n");
      out.write("\t\t\t\t\tthrow new Error('유효한 랭킹 데이터가 없습니다');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log(`조회순 랭킹 데이터 수신:`, data.length, '건');\n");
      out.write("\t\t\t\tdisplayRankings(data, 'views');\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.catch(error => {\n");
      out.write("\t\t\t\tconsole.error('랭킹 데이터 로드 실패:', error);\n");
      out.write("\t\t\t\tcontainer.innerHTML = `\n");
      out.write("\t\t\t\t\t<div class=\"error-message\">\n");
      out.write("\t\t\t\t\t\t<i class=\"fas fa-exclamation-triangle\"></i> \n");
      out.write("\t\t\t\t\t\t랭킹을 불러오는 중 오류가 발생했습니다<br>\n");
      out.write("\t\t\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${error.message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\n");
      out.write("\t\t\t\t\t</div>`;\n");
      out.write("\t\t\t});\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 입찰순 랭킹 로드\n");
      out.write("\tfunction loadBidsRanking() {\n");
      out.write("\t\tconsole.log('입찰순 랭킹 데이터 요청 시작');\n");
      out.write("\t\tconst container = document.querySelector('.ranking-items');\n");
      out.write("\t\tif (!container) {\n");
      out.write("\t\t\tconsole.error('랭킹 컨테이너를 찾을 수 없습니다');\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tcontainer.innerHTML = '<div class=\"loading-indicator\">랭킹 로딩 중...</div>';\n");
      out.write("\t\t\n");
      out.write("\t\tconst url = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/product/rankings?type=bids&limit=10`;\n");
      out.write("\t\tconsole.log('요청 URL:', url);\n");
      out.write("\t\t\n");
      out.write("\t\tfetch(url)\n");
      out.write("\t\t\t.then(response => {\n");
      out.write("\t\t\t\tconsole.log(`서버 응답 상태: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\tif (!response.ok) {\n");
      out.write("\t\t\t\t\tthrow new Error(`서버 응답 오류: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn response.text();\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.then(text => {\n");
      out.write("\t\t\t\tif (!text || text.trim() === '') {\n");
      out.write("\t\t\t\t\tthrow new Error('서버에서 빈 응답을 받았습니다');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log('서버 응답 원본 (처음 100자):', text.substring(0, 100) + '...');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\ttry {\n");
      out.write("\t\t\t\t\treturn JSON.parse(text);\n");
      out.write("\t\t\t\t} catch (e) {\n");
      out.write("\t\t\t\t\tconsole.error('JSON 파싱 오류:', e);\n");
      out.write("\t\t\t\t\tthrow new Error('JSON 파싱 오류');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.then(data => {\n");
      out.write("\t\t\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n");
      out.write("\t\t\t\t\tthrow new Error('유효한 랭킹 데이터가 없습니다');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log(`입찰순 랭킹 데이터 수신:`, data.length, '건');\n");
      out.write("\t\t\t\tdisplayRankings(data, 'bids');\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.catch(error => {\n");
      out.write("\t\t\t\tconsole.error('랭킹 데이터 로드 실패:', error);\n");
      out.write("\t\t\t\tcontainer.innerHTML = `\n");
      out.write("\t\t\t\t\t<div class=\"error-message\">\n");
      out.write("\t\t\t\t\t\t<i class=\"fas fa-exclamation-triangle\"></i> \n");
      out.write("\t\t\t\t\t\t랭킹을 불러오는 중 오류가 발생했습니다<br>\n");
      out.write("\t\t\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${error.message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\n");
      out.write("\t\t\t\t\t</div>`;\n");
      out.write("\t\t\t});\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 찜순 랭킹 로드\n");
      out.write("\tfunction loadFavoritesRanking() {\n");
      out.write("\t\tconsole.log('찜순 랭킹 데이터 요청 시작');\n");
      out.write("\t\tconst container = document.querySelector('.ranking-items');\n");
      out.write("\t\tif (!container) {\n");
      out.write("\t\t\tconsole.error('랭킹 컨테이너를 찾을 수 없습니다');\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tcontainer.innerHTML = '<div class=\"loading-indicator\">랭킹 로딩 중...</div>';\n");
      out.write("\t\t\n");
      out.write("\t\tconst url = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/product/rankings?type=favorites&limit=10`;\n");
      out.write("\t\tconsole.log('요청 URL:', url);\n");
      out.write("\t\t\n");
      out.write("\t\tfetch(url)\n");
      out.write("\t\t\t.then(response => {\n");
      out.write("\t\t\t\tconsole.log(`서버 응답 상태: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\tif (!response.ok) {\n");
      out.write("\t\t\t\t\tthrow new Error(`서버 응답 오류: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn response.text();\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.then(text => {\n");
      out.write("\t\t\t\tif (!text || text.trim() === '') {\n");
      out.write("\t\t\t\t\tthrow new Error('서버에서 빈 응답을 받았습니다');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log('서버 응답 원본 (처음 100자):', text.substring(0, 100) + '...');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\ttry {\n");
      out.write("\t\t\t\t\treturn JSON.parse(text);\n");
      out.write("\t\t\t\t} catch (e) {\n");
      out.write("\t\t\t\t\tconsole.error('JSON 파싱 오류:', e);\n");
      out.write("\t\t\t\t\tthrow new Error('JSON 파싱 오류');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.then(data => {\n");
      out.write("\t\t\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n");
      out.write("\t\t\t\t\tthrow new Error('유효한 랭킹 데이터가 없습니다');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log(`찜순 랭킹 데이터 수신:`, data.length, '건');\n");
      out.write("\t\t\t\tdisplayRankings(data, 'favorites');\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t.catch(error => {\n");
      out.write("\t\t\t\tconsole.error('랭킹 데이터 로드 실패:', error);\n");
      out.write("\t\t\t\tcontainer.innerHTML = `\n");
      out.write("\t\t\t\t\t<div class=\"error-message\">\n");
      out.write("\t\t\t\t\t\t<i class=\"fas fa-exclamation-triangle\"></i> \n");
      out.write("\t\t\t\t\t\t랭킹을 불러오는 중 오류가 발생했습니다<br>\n");
      out.write("\t\t\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${error.message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\n");
      out.write("\t\t\t\t\t</div>`;\n");
      out.write("\t\t\t});\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 랭킹 표시 함수\n");
      out.write("\tfunction displayRankings(products, type) {\n");
      out.write("\t\tconsole.log('랭킹 표시 시작');\n");
      out.write("\t\t\n");
      out.write("\t\tconst container = document.querySelector('.ranking-items');\n");
      out.write("\t\tif (!container) return;\n");
      out.write("\t\t\n");
      out.write("\t\t// 컨테이너 초기화\n");
      out.write("\t\tcontainer.innerHTML = '';\n");
      out.write("\t\t\n");
      out.write("\t\t// 각 상품에 대한 랭킹 아이템 생성\n");
      out.write("\t\tproducts.forEach((product, index) => {\n");
      out.write("\t\t\t// 상품 ID 검증\n");
      out.write("\t\t\tconst productId = Number(product.product_id);\n");
      out.write("\t\t\tconsole.log(`상품 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index+1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(" 조회: ID=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${productId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(", 제목=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${product.title || '제목 없음'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif (!productId) {\n");
      out.write("\t\t\t\tconsole.warn(`상품 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index+1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("의 ID가 유효하지 않습니다:`, product);\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 제목 및 가격 처리\n");
      out.write("\t\t\tconst title = product.title || '제목 없음';\n");
      out.write("\t\t\tconst price = Number(product.price) || 0;\n");
      out.write("\t\t\tconst formattedPrice = new Intl.NumberFormat('ko-KR').format(price);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 현재 최고 입찰가 처리\n");
      out.write("\t\t\tconst currentBid = Number(product.current_bid) || 0;\n");
      out.write("\t\t\t// 현재 입찰가가 0인 경우 기본 가격을 표시, 그렇지 않으면 현재 입찰가를 표시\n");
      out.write("\t\t\tconst displayPrice = currentBid > 0 ? currentBid : price;\n");
      out.write("\t\t\tconst formattedDisplayPrice = new Intl.NumberFormat('ko-KR').format(displayPrice);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 이미지 경로 처리\n");
      out.write("\t\t\tlet imagePath = product.image_path || '';\n");
      out.write("\t\t\tif (!imagePath || imagePath.trim() === '') {\n");
      out.write("\t\t\t\timagePath = '");
      out.print(request.getContextPath());
      out.write("/images/default.jpg';\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\t// 상대 경로/절대 경로 처리\n");
      out.write("\t\t\t\tif (imagePath.startsWith('/')) {\n");
      out.write("\t\t\t\t\timagePath = '");
      out.print(request.getContextPath());
      out.write("' + imagePath;\n");
      out.write("\t\t\t\t} else if (!imagePath.startsWith('http')) {\n");
      out.write("\t\t\t\t\timagePath = '");
      out.print(request.getContextPath());
      out.write("/' + imagePath;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 경로 정리\n");
      out.write("\t\t\t\timagePath = imagePath.replace(/ /g, '%20').replace(/\\\\/g, '/');\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 추가 속성 (신규 상품, 순위 변동)\n");
      out.write("\t\t\tconst isNew = product.is_new === true || product.is_new === 'true';\n");
      out.write("\t\t\tconst rankChange = Number(product.rank_change) || 0;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 랭킹 아이템 요소 생성\n");
      out.write("\t\t\tconst rankItem = document.createElement('div');\n");
      out.write("\t\t\trankItem.className = 'ranking-item';\n");
      out.write("\t\t\trankItem.dataset.productId = productId;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 순위 배지 클래스 설정\n");
      out.write("\t\t\tlet badgeClass = '';\n");
      out.write("\t\t\tif (index < 3) badgeClass = 'top-3';\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 랭킹 아이템 내용 설정\n");
      out.write("\t\t\trankItem.innerHTML = \n");
      out.write("\t\t\t\t'<div class=\"rank-badge ' + badgeClass + '\">' + (index + 1) + '</div>' +\n");
      out.write("\t\t\t\t(isNew ? '<div class=\"rank-badge new\">NEW</div>' : '') +\n");
      out.write("\t\t\t\t(rankChange > 0 ? '<div class=\"rank-badge up\"><i class=\"fas fa-caret-up\"></i>' + rankChange + '</div>' : '') +\n");
      out.write("\t\t\t\t(rankChange < 0 ? '<div class=\"rank-badge down\"><i class=\"fas fa-caret-down\"></i>' + Math.abs(rankChange) + '</div>' : '') +\n");
      out.write("\t\t\t\t'<div class=\"rank-image\">' +\n");
      out.write("\t\t\t\t\t'<img src=\"' + imagePath + '\"' + \n");
      out.write("\t\t\t\t\t\t' alt=\"' + title + '\"' + \n");
      out.write("\t\t\t\t\t\t' class=\"rank-item-image\"' +\n");
      out.write("\t\t\t\t\t\t' onerror=\"this.onerror=null; this.src=\\'' + '");
      out.print(request.getContextPath());
      out.write("/images/default.jpg' + '\\';\"' +\n");
      out.write("\t\t\t\t\t'>' +\n");
      out.write("\t\t\t\t'</div>' +\n");
      out.write("\t\t\t\t'<div class=\"rank-info\">' +\n");
      out.write("\t\t\t\t\t'<div class=\"rank-title\">' + title + '</div>' +\n");
      out.write("\t\t\t\t\t'<div class=\"rank-price\">' + formattedDisplayPrice + \n");
      out.write("\t\t\t\t\t(currentBid > 0 ? '<span style=\"font-size: 0.8rem; font-weight: normal; margin-left: 3px; color: #FF9800;\"> (현재 입찰가)</span>' : '') + \n");
      out.write("\t\t\t\t\t'원</div>' +\n");
      out.write("\t\t\t\t'</div>';\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 클릭 이벤트 추가\n");
      out.write("\t\t\trankItem.addEventListener('click', function() {\n");
      out.write("\t\t\t\tconst clickedProductId = this.dataset.productId;\n");
      out.write("\t\t\t\tconsole.log('상품 클릭:', clickedProductId);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tif (!clickedProductId || isNaN(parseInt(clickedProductId, 10))) {\n");
      out.write("\t\t\t\t\tconsole.error('유효하지 않은 상품 ID:', clickedProductId);\n");
      out.write("\t\t\t\t\talert('유효하지 않은 상품입니다. 다른 상품을 선택해주세요.');\n");
      out.write("\t\t\t\t\treturn;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 조회수 증가 API 호출\n");
      out.write("\t\t\t\tfetch(contextPath + '/product/rankings?action=view&product_id=' + clickedProductId, {\n");
      out.write("\t\t\t\t\tmethod: 'POST',\n");
      out.write("\t\t\t\t\theaders: { 'Content-Type': 'application/x-www-form-urlencoded' }\n");
      out.write("\t\t\t\t})\n");
      out.write("\t\t\t\t.then(res => console.log('조회수 증가 요청:', res.status))\n");
      out.write("\t\t\t\t.catch(err => console.error('조회수 증가 실패:', err));\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// 상품 상세 페이지로 이동\n");
      out.write("\t\t\t\twindow.location.href = contextPath + '/buyingproduct?product_id=' + clickedProductId;\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 컨테이너에 추가\n");
      out.write("\t\t\tcontainer.appendChild(rankItem);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log('랭킹 표시 완료');\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 캐러셀 화살표 설정\n");
      out.write("\tfunction setupCarouselArrows() {\n");
      out.write("\t\tconst container = document.querySelector('.ranking-items');\n");
      out.write("\t\tconst prevBtn = document.querySelector('.prev-arrow');\n");
      out.write("\t\tconst nextBtn = document.querySelector('.next-arrow');\n");
      out.write("\t\t\n");
      out.write("\t\tif (!container || !prevBtn || !nextBtn) {\n");
      out.write("\t\t\tconsole.warn('캐러셀 요소를 찾을 수 없습니다');\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 화면 크기에 따른 스크롤 아이템 수 계산\n");
      out.write("\t\tfunction getVisibleItems() {\n");
      out.write("\t\t\treturn window.innerWidth < 768 ? 2 : 4;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 이전 버튼 클릭 (왼쪽으로 스크롤)\n");
      out.write("\t\tprevBtn.addEventListener('click', function() {\n");
      out.write("\t\t\tconst items = container.querySelectorAll('.ranking-item');\n");
      out.write("\t\t\tif (items.length === 0) return;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tconst firstItem = items[0];\n");
      out.write("\t\t\tconst itemWidth = firstItem.offsetWidth + 15; // 마진 포함\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tcontainer.scrollBy({ \n");
      out.write("\t\t\t\tleft: -itemWidth * getVisibleItems(), \n");
      out.write("\t\t\t\tbehavior: 'smooth' \n");
      out.write("\t\t\t});\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 다음 버튼 클릭 (오른쪽으로 스크롤)\n");
      out.write("\t\tnextBtn.addEventListener('click', function() {\n");
      out.write("\t\t\tconst items = container.querySelectorAll('.ranking-item');\n");
      out.write("\t\t\tif (items.length === 0) return;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tconst firstItem = items[0];\n");
      out.write("\t\t\tconst itemWidth = firstItem.offsetWidth + 15; // 마진 포함\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tcontainer.scrollBy({ \n");
      out.write("\t\t\t\tleft: itemWidth * getVisibleItems(), \n");
      out.write("\t\t\t\tbehavior: 'smooth' \n");
      out.write("\t\t\t});\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// 가격 필터링 함수\n");
      out.write("\tfunction applyPriceFilter(priceRange) {\n");
      out.write("\t\tconsole.log('가격 필터 적용:', priceRange);\n");
      out.write("\t\tconst productCards = document.querySelectorAll('.product-card');\n");
      out.write("\t\t\n");
      out.write("\t\t// 모든 카드를 일단 표시\n");
      out.write("\t\tproductCards.forEach(card => {\n");
      out.write("\t\t\tcard.classList.remove('hidden');\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tif (priceRange === 'all') return; // 전체 선택 시 모든 카드 표시\n");
      out.write("\t\t\n");
      out.write("\t\t// 가격 범위 파싱\n");
      out.write("\t\tconst [minStr, maxStr] = priceRange.split('-');\n");
      out.write("\t\tconst min = parseInt(minStr, 10) || 0;\n");
      out.write("\t\tconst max = maxStr ? parseInt(maxStr, 10) : Number.MAX_SAFE_INTEGER;\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(`가격 범위: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${min}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(' ');
      out.write('~');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${max}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\n");
      out.write("\t\t// 각 카드의 가격을 확인하여 필터링\n");
      out.write("\t\tproductCards.forEach(card => {\n");
      out.write("\t\t\tconst priceElement = card.querySelector('.product-price');\n");
      out.write("\t\t\tif (!priceElement) return;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 가격 텍스트에서 숫자만 추출 (예: \"50,000원\" -> 50000)\n");
      out.write("\t\t\tconst priceText = priceElement.textContent;\n");
      out.write("\t\t\tconst priceMatch = priceText.match(/[\\d,]+/);\n");
      out.write("\t\t\tif (!priceMatch) return;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tconst price = parseInt(priceMatch[0].replace(/,/g, ''), 10);\n");
      out.write("\t\t\tconsole.log(`카드 가격: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${price}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(", 범위: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${min}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write('-');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${max}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("`);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 가격 범위에 맞지 않으면 숨김\n");
      out.write("\t\t\tif (price < min || price > max) {\n");
      out.write("\t\t\t\tcard.classList.add('hidden');\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 상품 카드에서 가격 정보 추출 함수\n");
      out.write("\tfunction extractPrice(card) {\n");
      out.write("\t\tconst priceElement = card.querySelector('.product-price');\n");
      out.write("\t\tif (!priceElement) return 0;\n");
      out.write("\t\t\n");
      out.write("\t\tconst priceText = priceElement.textContent;\n");
      out.write("\t\tconst priceMatch = priceText.match(/[\\d,]+/);\n");
      out.write("\t\tif (!priceMatch) return 0;\n");
      out.write("\t\t\n");
      out.write("\t\treturn parseInt(priceMatch[0].replace(/,/g, ''), 10);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 카테고리 필터링 함수 복원\n");
      out.write("\tfunction initCategoryFilter() {\n");
      out.write("\t\tconst productCards = document.querySelectorAll('.product-card');\n");
      out.write("\t\t\n");
      out.write("\t\t// 상품 카드에 카테고리 정보 추가 (데이터 속성)\n");
      out.write("\t\tproductCards.forEach(card => {\n");
      out.write("\t\t\t// 실제 구현에서는 서버에서 카테고리 정보를 가져와야 함\n");
      out.write("\t\t\tif (!card.dataset.category) {\n");
      out.write("\t\t\t\tcard.dataset.category = 'all';\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 카테고리에 따라 상품 필터링 함수\n");
      out.write("\t\tfunction filterProductsByCategory(category) {\n");
      out.write("\t\t\tconsole.log('카테고리 필터 적용:', category);\n");
      out.write("\t\t\tconst productCards = document.querySelectorAll('.product-card');\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tproductCards.forEach(card => {\n");
      out.write("\t\t\t\tif (category === 'all' || card.dataset.category === category) {\n");
      out.write("\t\t\t\t\tcard.classList.remove('hidden');\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tcard.classList.add('hidden');\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// 정렬 기능 함수 복원\n");
      out.write("\t\tfunction applySortFilter(sortType) {\n");
      out.write("\t\t\tconsole.log('정렬 적용:', sortType);\n");
      out.write("\t\t\tconst productsContainer = document.querySelector('.products-container');\n");
      out.write("\t\t\tif (!productsContainer) return;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tconst productCards = Array.from(productsContainer.querySelectorAll('.product-card:not(.hidden)'));\n");
      out.write("\t\t\tif (productCards.length === 0) return;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 정렬 전에 모든 카드 제거\n");
      out.write("\t\t\tproductCards.forEach(card => card.remove());\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 정렬 타입에 따라 카드 정렬\n");
      out.write("\t\t\tswitch(sortType) {\n");
      out.write("\t\t\t\tcase 'priceAsc':\n");
      out.write("\t\t\t\t\t// 가격 낮은순 정렬\n");
      out.write("\t\t\t\t\tproductCards.sort((a, b) => {\n");
      out.write("\t\t\t\t\t\tconst priceA = extractPrice(a);\n");
      out.write("\t\t\t\t\t\tconst priceB = extractPrice(b);\n");
      out.write("\t\t\t\t\t\treturn priceA - priceB;\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\tcase 'priceDesc':\n");
      out.write("\t\t\t\t\t// 가격 높은순 정렬\n");
      out.write("\t\t\t\t\tproductCards.sort((a, b) => {\n");
      out.write("\t\t\t\t\t\tconst priceA = extractPrice(a);\n");
      out.write("\t\t\t\t\t\tconst priceB = extractPrice(b);\n");
      out.write("\t\t\t\t\t\treturn priceB - priceA;\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\tcase 'newest':\n");
      out.write("\t\t\t\t\t// 최신순 정렬 (현재는 DOM 순서를 기준으로 함)\n");
      out.write("\t\t\t\t\t// 실제로는 서버에서 날짜 정보를 가져와 정렬해야 함\n");
      out.write("\t\t\t\t\t// 여기서는 기본 순서(역순)로 유지\n");
      out.write("\t\t\t\t\tproductCards.reverse();\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\tcase 'endingSoon':\n");
      out.write("\t\t\t\t\t// 마감임박순 (현재는 임의 순서)\n");
      out.write("\t\t\t\t\t// 실제로는 서버에서 경매 종료 시간 정보를 가져와 정렬해야 함\n");
      out.write("\t\t\t\t\t// 여기서는 기본 순서로 유지\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\tcase 'relevance':\n");
      out.write("\t\t\t\tdefault:\n");
      out.write("\t\t\t\t\t// 기본 정렬 (변경 없음)\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 정렬된 카드를 다시 추가\n");
      out.write("\t\t\tproductCards.forEach(card => {\n");
      out.write("\t\t\t\tproductsContainer.appendChild(card);\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// 상품 상태 필터링 함수 추가\n");
      out.write("\t\tfunction filterByStatus(status) {\n");
      out.write("\t\t\tconsole.log('상태 필터 적용:', status);\n");
      out.write("\t\t\tconst productCards = document.querySelectorAll('.product-card');\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tproductCards.forEach(card => {\n");
      out.write("\t\t\t\tconst statusElement = card.querySelector('.product-status');\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tif (status === 'all') {\n");
      out.write("\t\t\t\t\t// 전체 선택 시 모든 카드 표시\n");
      out.write("\t\t\t\t\tcard.classList.remove('hidden');\n");
      out.write("\t\t\t\t\treturn;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tif (status === 'onsale') {\n");
      out.write("\t\t\t\t\t// 판매중 상품: product-status가 없거나 '경매 종료'가 아닌 상품\n");
      out.write("\t\t\t\t\tif (!statusElement || !statusElement.textContent.includes('경매 종료')) {\n");
      out.write("\t\t\t\t\t\tcard.classList.remove('hidden');\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tcard.classList.add('hidden');\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} else if (status === 'closed') {\n");
      out.write("\t\t\t\t\t// 경매종료 상품: product-status가 있고 '경매 종료'를 포함하는 상품\n");
      out.write("\t\t\t\t\tif (statusElement && statusElement.textContent.includes('경매 종료')) {\n");
      out.write("\t\t\t\t\t\tcard.classList.remove('hidden');\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tcard.classList.add('hidden');\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 임의의 카테고리 할당 함수 (실제 구현에서는 사용하지 않음)\n");
      out.write("\t\tfunction getRandomCategory() {\n");
      out.write("\t\t\tconst categories = ['electronics', 'fashion', 'beauty', 'sports', 'books', 'appliances'];\n");
      out.write("\t\t\treturn categories[Math.floor(Math.random() * categories.length)];\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
